

import math
import os
import random
import re
import sys



def display_board(board):
    for i in board[::-1]:
        print(i)

def xandycheck(board, r_q, c_q):

    count = 0
    ##down
    for i in range(1, (len(board)-(r_q - 1))):
        if board[r_q-1+i][c_q-1] != ' ':
            break
        board[r_q-1+i][c_q-1] = 'i'
        count += 1

    ##up
    for j in range(1, (r_q)):
        if board[r_q-1-j][c_q-1] != ' ':
            break
        board[r_q-1-j][c_q-1] = 'i'
        count += 1

    ##right
    for k in range(1, (len(board)-(c_q - 1))):
        if board[r_q-1][c_q-1+k] != ' ':
            break
        board[r_q-1][c_q-1+k] = 'i'
        count += 1

    ##left
    for l in range(1, (c_q)):
        if board[r_q-1][c_q-1-l] != ' ':
            break
        board[r_q-1][c_q-1-l] != 'i'
        count += 1

    return count


def diagcheck(board, r_q , c_q):
    count = 0

    if (len(board) - c_q) > (len(board) - r_q):
        for i in range(1, c_q):
            if board[r_q-1-i][c_q-1-i] != ' ':
                break
            board[r_q-1-i][c_q-1-i] = 'i'
            count += 1
    elif (len(board) - c_q) == (len(board) - r_q):
        for i in range(1, c_q):
            if board[r_q-1-i][c_q-1-i] != ' ':
                break
            board[r_q-1-i][c_q-1-i] = 'i'
            count += 1
    elif (len(board) - c_q) < (len(board) - r_q):
        for i in range(1, r_q):
            if board[r_q-1-i][c_q-1-i] != ' ':
                break
            board[r_q-1-i][c_q-1-i] = 'i'
            count += 1

def queensAttack(n, k, r_q, c_q, obstacles):
    row = []
    board = []
    for i in range(n):
        for j in range(n):
            row.append(' ')
        board.append(row)
        row = []
    board[r_q-1][c_q-1] = 'q'
    for x in obstacles:
        board[x[0]-1][x[1]-1] = 'o'

    xandycheck(board, r_q, c_q)
    diagcheck(board, r_q , c_q)
    display_board(board)

    # Write your code here

if __name__ == '__main__':


    first_multiple_input = input().rstrip().split()

    n = int(first_multiple_input[0])

    k = int(first_multiple_input[1])

    second_multiple_input = input().rstrip().split()

    r_q = int(second_multiple_input[0])

    c_q = int(second_multiple_input[1])

    obstacles = []

    for _ in range(k):
        obstacles.append(list(map(int, input().rstrip().split())))

    result = queensAttack(n, k, r_q, c_q, obstacles)

    print(result)
